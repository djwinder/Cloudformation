{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "NAT Monitor: Template to launch two NAT nodes in an existing VPC in a hot/hot NAT configuration. This template assumes you already have a VPC configured with public subnets in 2 AZs, cooresponding subnets, and route tables configured for your private subnets.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "Default" : "development",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "VPC" : {
      "Description" : "VPC ID for the NAT instances (required for creating NAT security group).",
      "Type" : "AWS::EC2::VPC::Id",
      "Default" : "vpc-########"
    },
    "VpcCidr" : {
      "Description" : "VPC CIDR block (required for creating NAT security group rules for NATing traffic).",
      "Type" : "String",
      "Default" : "10.0.0.0/16"
    },
    "PublicSubnetA" : {
      "Description" : "Subnet ID for the public subnet to launch the first NAT instance into.",
      "Type" : "String",
      "Default" : "subnet-########"
    },
    "PublicSubnetB" : {
      "Description" : "Subnet ID for the public subnet to launch the second NAT instance into.",
      "Type" : "String",
      "Default" : "subnet-XXXXXXXX"
    },
    "PrivateRouteTableA" : {
      "Description" : "Route Table ID to associate default route with NAT instance 1.",
      "Type" : "String",
      "Default" : "rtb-########"
    },
    "PrivateRouteTableB" : {
      "Description" : "Route Table ID to associate default route with NAT instance 2.",
      "Type" : "String",
      "Default" : "rtb-YYYYYYYY"
    },
    "TunnelIPA" : {
      "Description" : "Choose tunnel ip that's associated with NAT instance A",
      "Type" : "String",
      "Default" : "169.254.255.100"
    },
    "TunnelIPB" : {
      "Description" : "Choose tunnel ip that's associated with NAT instance B",
      "Type" : "String",
      "Default" : "169.254.255.101"
    },
	"BGPArea" : {
      "Description" : "BGP Area",
      "Type" : "String",
      "Default" : "64501"
    },
    "NATNodeInstanceType" : {
      "Description" : "Instance type for NAT nodes.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
	"NumberOfPings" : {
      "Description" : "The number of times the health check will ping the alternate NAT Node",
      "Type" : "String",
      "Default" : "3"
    },
	"PingTimeout" : {
      "Description" : "The number of seconds to wait for each ping response before determining that the ping has failed",
      "Type" : "String",
      "Default" : "1"
    },
	"WaitBetweenPings" : {
      "Description" : "The number of seconds to wait between health checks",
      "Type" : "String",
      "Default" : "2"
    },
	"WaitForInstanceStop" : {
      "Description" : "The number of seconds to wait for alternate NAT Node to stop before attempting to stop it again",
      "Type" : "String",
      "Default" : "60"
    },
	"WaitForInstanceStart" : {
      "Description" : "The number of seconds to wait for alternate NAT Node to restart before resuming health checks again",
      "Type" : "String",
      "Default" : "300"
    }
  },

  "Mappings" : {
    "AWSNATAMI" : {
      "us-east-1"      : { "AMI" : "ami-4868ab25" },
      "us-west-2"      : { "AMI" : "ami-8e27adbe" },
      "us-west-1"      : { "AMI" : "ami-b63210f3" },
      "eu-west-1"      : { "AMI" : "ami-3c5f5748" },
      "ap-southeast-1" : { "AMI" : "ami-ba7538e8" },
      "ap-southeast-2" : { "AMI" : "ami-b6df4e8c" },
      "ap-northeast-1" : { "AMI" : "ami-5d7dfa5c" },
      "sa-east-1"      : { "AMI" : "ami-89c81394" }
    }
  },

  "Resources" : {

    "NATRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "Path": "/",
          "Policies": [ {
             "PolicyName": "NAT_Takeover",
             "PolicyDocument": {
                "Statement": [ {
                   "Effect": "Allow",
                   "Action": [
						"ec2:DescribeInstances",
						"ec2:DescribeRouteTables",
						"ec2:CreateRoute",
						"ec2:ReplaceRoute",
						"ec2:StartInstances",
						"ec2:StopInstances",
						"ec2:*"
					   ],
                   "Resource": "*"
                } ]
				}
             },
			 {
			 "PolicyName": "Write_Configuration",
             "PolicyDocument": {
                "Statement": [ {
                   "Effect": "Allow",
                   "Action": [
						"s3:PutObject"
					   ],
                   "Resource": [
						"arn:aws:s3:::o1-vpn-configuration/instances/*",
						"arn:aws:s3:::o1-lambda-invoke/logs/*"
					]
                } ]
				}
			 },
			 {
			 "PolicyName": "Get_Configuration",
             "PolicyDocument": {
                "Statement": [ {
                   "Effect": "Allow",
                   "Action": [
						"s3:GetObject",
						"s3:ListBucket",
						"s3:GetBucketLocation"
					   ],
                   "Resource": "*"
                } ]
				}
			 }
			 ]
          }
    },

    "NATRoleProfile": {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [ {
             "Ref": "NATRole"
          } ]
       }
    },

    "NAT1EIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "NAT1Instance" }
      }
    },

    "NAT1Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Create NAT #1",
		"AWS::CloudFormation::Authentication" : {
            "S3AccessCreds":{
                "type":"S3",
                "roleName":{
					"Ref":"NATRole"
                }
			}
		},
        "AWS::CloudFormation::Init" : {
		"configSets" : {
            "InstallAndRun" : [ "Install", "Configure" ]
          },
        "Install" : {
			"packages" : {
              "yum" : {
                "openvpn" : [],
                "quagga" : []
              }
            },
			"files" : {
            "/root/config.txt":{
                "source":"http://o1-vpn-configuration.s3.amazonaws.com/config.txt",
                "mode":"000400",
                "owner":"root",
                "group":"root",
				"authentication":"S3AccessCreds"
                 },
			"/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.NAT1Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource NAT1Instance ",
				  "         --configsets InstallAndRun ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              },
			  "/etc/openvpn/useast1-to-useast1.key":{
					"source":"http://o1-vpn-configuration.s3.amazonaws.com/keys/useast1-to-useast1.key",
					"mode":"000400",
					"owner":"root",
					"group":"root",
					"authentication":"S3AccessCreds"
					},
				"/etc/openvpn/useast1-to-useast1.conf":{
					"source":"http://o1-vpn-configuration.s3.amazonaws.com/openvpn.template",
					"mode":"000400",
					"owner":"root",
					"group":"root",
					"authentication":"S3AccessCreds"
				}
			},
			"services" : {
              "sysvinit" : {
				"openvpn" : { "enabled" : "true", "ensureRunning" : "true"},
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
			
		},
		"Configure":{
			"commands" : {
				"01_Install_NAT" : {
				"command":{ 
					 "Fn::Join" : ["", [
				 "#!/bin/bash -v\n",
				  "yum update -y aws*\n",
				  ". /etc/profile.d/aws-apitools-common.sh\n",
				  "# Configure iptables\n",
				  "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
				  "/sbin/iptables-save > /etc/sysconfig/iptables\n",
				  "# Configure ip forwarding and redirects\n",
				  "echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >  /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
				  "mkdir -p /etc/sysctl.d/\n",
				  "cat <<EOF > /etc/sysctl.d/nat.conf\n",
				  "net.ipv4.ip_forward = 1\n",
				  "net.ipv4.conf.eth0.send_redirects = 0\n",
				  "EOF\n"
				  
					]]}
					},
				"02_Configure_HA" : {
				"command":{ 
					"Fn::Join" : ["", [
				 "#!/bin/bash -v\n",
				 "# Download nat_monitor.sh and configure\n",
				 "cd /root\n",
				  "wget http://media.amazonwebservices.com/articles/nat_monitor_files/nat_monitor.sh\n"
				  ]]}
				},
				"03_OpenVPN" : {
					"command":{ 
						"Fn::Join" : ["", [
					"#!/bin/bash -v\n",
					"# Delete the configuration\n",
					"sed -i '/net.ipv4.conf.all.rp_filter/d' /etc/sysctl.conf\n",
					"sed -i '/net.ipv4.conf.lo.rp_filter/d' /etc/sysctl.conf\n",
					"sed -i '/net.ipv4.conf.default.rp_filter/d' /etc/sysctl.conf\n",
					"# Add line to file\n",
					"cat <<EOF >> /etc/sysctl.conf\n",
					"net.ipv4.conf.all.rp_filter = 0\n",
					"net.ipv4.conf.lo.rp_filter = 0\n",
					"net.ipv4.conf.default.rp_filter = 0\n",
					"EOF\n",
					"# OpenVPN template update\n",
					"sed -i 's/port xxx/port 10240/g' /etc/openvpn/useast1-to-useast1.conf\n"
				  
					]]}
				},
				"04_Quagga" : {
					"command":{ 
						"Fn::Join" : ["", [
					"#!/bin/bash -v\n",
					"touch /etc/quagga/bgpd.conf /etc/quagga/zebra.conf; chown quagga:quagga /etc/quagga/*\n",
					"chkconfig openvpn on; chkconfig zebra on; chkconfig bgpd on\n",
					"cat <<EOF >> /etc/profile.d/vtysh.sh\n",
					"export VTYSH_PAGER=more\n",
					"EOF\n",
					". /etc/profile.d/vtysh.sh\n",
					"/etc/init.d/zebra start; /etc/init.d/bgpd start\n",
					"sysctl -p"
					
				  
					]]
					}
					},
				"05_UploadConfiguration":{
					"command":{
							"Fn::Join" : ["", [
					"#!/bin/bash -v\n",
					"INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
					"curl http://169.254.169.254/latest/meta-data/public-ipv4 > /tmp/public-ip\n",
					"curl http://169.254.169.254/latest/meta-data/local-ipv4 > /tmp/private-ip\n",
					"echo \"",{ "Ref" : "TunnelIPA"},"\" > /tmp/tunnel-ip\n",
					"echo \"",{ "Ref" : "NATSecurityGroup" },"\" > /tmp/security-group-id\n",
					"echo \"",{ "Ref" : "VpcCidr" },"\" > /tmp/vpc-cidr\n",
					"echo \"",{ "Ref" : "BGPArea" },"\" > /tmp/bgp-area\n",
					"aws s3 cp /tmp/public-ip s3://o1-vpn-configuration/instances/",{ "Ref" : "AWS::Region" },"/$INSTANCE_ID/\n",
					"aws s3 cp /tmp/private-ip s3://o1-vpn-configuration/instances/",{ "Ref" : "AWS::Region" },"/$INSTANCE_ID/\n",
					"aws s3 cp /tmp/tunnel-ip s3://o1-vpn-configuration/instances/",{ "Ref" : "AWS::Region" },"/$INSTANCE_ID/\n",
					"aws s3 cp /tmp/vpc-cidr s3://o1-vpn-configuration/instances/",{ "Ref" : "AWS::Region" },"/$INSTANCE_ID/\n",
					"aws s3 cp /tmp/security-group-id s3://o1-vpn-configuration/instances/",{ "Ref" : "AWS::Region" },"/$INSTANCE_ID/\n",
					"aws s3 cp /tmp/bgp-area s3://o1-vpn-configuration/instances/",{ "Ref" : "AWS::Region" },"/$INSTANCE_ID/\n"
				  
					]]
						}
					}

				}
			}	
		}
		
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "NATNodeInstanceType" } ,
        "KeyName" : { "Ref" : "KeyName" },
		"IamInstanceProfile" : { "Ref" : "NATRoleProfile" },
        "SubnetId" : { "Ref" : "PublicSubnetA" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }],
        "Tags" : [
          { "Key" : "Name", "Value" : "VPN AZa" },
		  { "Key": "VPNConfiguration", "Value" : "Unconfigured" }
        ],
		"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource NAT1Instance ",
			 "         --configsets InstallAndRun ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource NAT1Instance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}  
      }
    },


    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Rules for allowing access to HA Nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "-1", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : { "Ref" : "VpcCidr" }} ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "NATAllowICMP" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "NATSecurityGroup" },
        "IpProtocol" : "icmp", 
	"FromPort" : "-1",  
	"ToPort" : "-1",  
	"SourceSecurityGroupId" : { "Ref" : "NATSecurityGroup" }
      }
    }
  },

  "Outputs" : {
    "NAT1" : {
      "Description" : "NAT #1 EIP.",
      "Value" :  { "Fn::Join" : [ "", [ { "Ref" : "NAT1Instance" }, " (", { "Ref" : "NAT1EIP" }, ")" ]] }
    },
    
    "PrivateRouteTable1" : {
      "Description" : "Private Route Table #1.",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "PrivateRouteTableA" }, " (0.0.0.0/0 -> ", { "Ref" : "NAT1Instance" }, ")" ]] }
    }
  }
}
